type User = 
 record {
   email: text;
   name: text;
   phone: text;
 };
type Ticket = 
 record {
   ticketClubSeatsFee: text;
   ticketClubSeatsFeeIVU: text;
   ticketDescription: text;
   ticketFacilityFee: text;
   ticketFacilityFeeIVU: text;
   ticketId: text;
   ticketOrderFeeWeb: text;
   ticketOrderFeeWebIVU: text;
   ticketPrice: text;
   ticketPriceIVU: text;
   ticketPromoterFee: text;
   ticketPromoterFeeIVU: text;
   ticketQty: text;
   ticketRow: text;
   ticketSeat: text;
   ticketSection: text;
   ticketServiceFee: text;
   ticketServiceFeeIVU: text;
   ticketStatus: text;
   ticketTotal: text;
 };
type Seat = record {ticket: Ticket;};
type Orders = 
 service {
   create: (Order) -> (OrderCreated);
   delete: (OrderId) -> (opt Order);
   getAllOrders: () -> (vec Order) query;
   getById: (OrderId) -> (opt Order) query;
   total: () -> (nat) query;
   update: (OrderId, Order) -> (opt Order);
 };
type OrderId = text;
type OrderCreatedPart = record {id: OrderId;};
type OrderCreated = 
 variant {
   err: ApiError;
   ok: OrderCreatedPart;
 };
type Order = 
 record {
   companyId: text;
   event: Event;
   operation: text;
   orderId: OrderId;
   seats: vec Seat;
   status: text;
   user: User;
 };
type Event = 
 record {
   eventArtist: text;
   eventCountry: text;
   eventDateTime: text;
   eventName: text;
   eventPromoterCompany: text;
   eventVenue: text;
 };
type ApiError = 
 variant {
   Other;
   Unauthorized;
 };
service : () -> Orders
